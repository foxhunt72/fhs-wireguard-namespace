# network create namespace
import os

from .ip_wrapper import ip_wrapper, Ip_Wrapper_Command_Error
from pprint import pprint

def check_namespace_name(namespace_name):
    """Check if namespace name is valid."""
    if namespace_name.isalnum() is False:
        return False
    if len(namespace_name) > 15:
        return False
    return True


def check_namespace_exists(namespace_name):
    """Check if namespace exists."""
    ipw = ip_wrapper()
    return namespace_name in ipw.netns_list()


def netns_create(namespace):
    """Create a namespace."""
    ipw = ip_wrapper()
    if check_namespace_name(namespace) is False:
        return "ERROR: Namespace name is not valid"
    if check_namespace_exists(namespace) is True:
        return "ERROR: Namespace already exists"

    try:
        ipw.netns_add(namespace)
    except PermissionError:
        return "ERROR: Permission denied, please run as root or with sudo"
    except Ip_Wrapper_Command_Error as e:
        if 'Permission denied' in str(e):
            return "ERROR: Permission denied, please run as root or with sudo"
        return f"ERROR: {str(e)}"
    if check_namespace_exists(namespace) is True:
        return None
    return "ERROR: Namespace could not be created"

def netns_setdns(*, namespace, dns, search=None, debug=True):
    if debug is True:
        print(f"set dns in {namespace}")
        print(f"dns is {dns}")
    if check_namespace_name(namespace) is False:
        return "ERROR: Namespace name is not valid"
    
    netns_path="/etc/netns"
    if not os.path.exists(netns_path):
        return f"ERROR: Namespace path '{netns_path}' does not exist"

    netns_path_namespace = os.path.join(netns_path, namespace)
    if not os.path.exists(netns_path_namespace):
        try:
            os.makedirs(netns_path_namespace)
        except PermissionError:
            return "ERROR: Permission denied, please run as root or with sudo"
    resolv_file=os.path.join(netns_path_namespace, "resolv.conf")
    with open(resolv_file, 'w') as resolv_file_handle:
        resolv_file_handle.write("# Generated by fhs_wireguard_namespace\n")
        if search is not None:
            resolv_file_handle.write("search %s\n" % search)
        if type(dns) == str:
            resolv_file_handle.write("nameserver %s\n" % dns)
        elif type(dns) == list or type(dns) == tuple:
            for d in dns:
                resolv_file_handle.write("nameserver %s\n" % d)
        else:
            pprint(dns)
            return f"ERROR: dns is not a string, tuple or list, but type {type(dns)}."
    return None
